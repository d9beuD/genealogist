<!DOCTYPE html>
<html class="h-100" data-bs-theme="{{ app.request.cookies.get('theme')|default('auto') }}">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %}Welcome!{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
        {% block stylesheets %}
            <link rel="stylesheet" href="{{ asset('styles/app.scss') }}">
        {% endblock %}

        {% block javascripts %}
            {% block importmap %}{{ importmap('app') }}{% endblock %}
        {% endblock %}
        <script src="https://kit.fontawesome.com/431529382e.js" crossorigin="anonymous"></script>
    </head>
    <body class="h-100 d-flex flex-column" style="background-color: var(--bs-tertiary-bg);">
        {% include "_includes/main/navbar.html.twig" %}

        <main 
            {% if tree_view|default(false) %}
                class="tree-view"
            {% endif %}
        >
            {% block body %}{% endblock %}
        </main>
        
        {% include "_includes/main/footer.html.twig" %}
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            (() => {
                'use strict';

                /** Popovers */
                const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]')
                const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl, {
                    container: 'body',
                    trigger: 'hover',
                    html: true,
                }))

                /** Tooltips */
                const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
                const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

                /** Breadcrumb */
                const breadcrumb = document.querySelector("#breadcrumb")
                const observer = new IntersectionObserver( 
                    (entries) => {
                        entries.forEach(e => {
                            if (e.isIntersecting) {
                                e.target.classList.remove('border-bottom')
                            } else {
                                e.target.classList.add('border-bottom')
                            }
                        })
                    },
                    { threshold: [1] }
                );

                if (breadcrumb) {
                    observer.observe(breadcrumb);
                }
            })()
        </script>
    </body>
</html>

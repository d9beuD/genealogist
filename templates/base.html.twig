<!DOCTYPE html>
<html class="h-100" data-bs-theme="{{ app.request.cookies.get('theme')|default('auto') }}">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %}Welcome!{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
        <link rel="stylesheet" href="/styles/main.css">
        {% block stylesheets %}
        {% endblock %}

        {% block javascripts %}
            {# {% block importmap %}{{ importmap('app') }}{% endblock %} #}
        {% endblock %}
        <script src="https://kit.fontawesome.com/431529382e.js" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" defer></script>
    </head>
    <body class="h-100 d-flex flex-column" style="background-color: var(--bs-tertiary-bg);">
        {% include "_includes/main/navbar.html.twig" %}
        <main>{% block body %}{% endblock %}</main>
        {% include "_includes/main/footer.html.twig" %}
        <script>
            (() => {
                'use strict';

                // Define the function to apply the color scheme
                const themeSavedInCookie = document.documentElement.dataset.bsTheme !== 'auto';
                const getBrowserColorScheme = () => window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
                const applyColorScheme = (mode) => {
                    document.documentElement.dataset.bsTheme = mode;
                }
                const saveColorScheme = (mode) => {
                    fetch('/settings/theme', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ mode }),
                        credentials: 'same-origin',
                    })
                }

                // If the theme is not saved in the cookie, apply the browser color scheme
                // and save it in the cookie
                if (!themeSavedInCookie) {
                    const browserColorScheme = getBrowserColorScheme();
                    applyColorScheme(browserColorScheme);
                    saveColorScheme(browserColorScheme);
                }

                // Listen for the user's color scheme preference changes
                window.addEventListener('DOMContentLoaded', () => {
                    document.querySelectorAll('[data-bs-theme-value]')
                        .forEach((toggle) => {
                            toggle.addEventListener('click', (event) => {
                                const mode = event.target.dataset.bsThemeValue;
                                applyColorScheme(mode);
                                saveColorScheme(mode);
                            })
                        })
                })
            })()
        </script>
    </body>
</html>
